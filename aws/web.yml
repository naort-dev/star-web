AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.
Parameters:
  StackName:
    Type: String
    Description: The name of the parent Fargate networking stack that you created. Necessary
                 to locate and reference resources created by that stack.

  ApiURL:
    Type: String
    Description: API URL

  ImageRepository:
    Type: String
    Default: 376169159073.dkr.ecr.us-east-1.amazonaws.com/
    Description: Image repository

  ImageTag:
    Type: String
    Default: ':latest'
    Description: Image tag

  HttpPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to

  BackendPort:
    Type: Number
    Default: 8080
    Description: What port number the application inside the docker container is binding to

  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run

  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc

Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

Resources:

  #--------------------------------------------------------------------------------------------------------------------
  # Common resources
  #--------------------------------------------------------------------------------------------------------------------

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref 'AWS::StackName'
      RetentionInDays: 14

  #--------------------------------------------------------------------------------------------------------------------
  # NGINX
  # Serves static content and proxies dynamic content to backend NODE at InternalLB:8080
  #--------------------------------------------------------------------------------------------------------------------

  NginxTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: 'web-nginx'
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: 'web-nginx'
          Image: !Join ['', [!Ref 'ImageRepository', 'web-nginx-aws', !Ref 'ImageTag']]
          PortMappings:
            - ContainerPort: !Ref 'HttpPort'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'AWS::StackName'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'web-nginx'
          Ulimits:
          - Name: nofile
            HardLimit: 8192
            SoftLimit: 8192
          Environment:
          - Name: PRIVATE_LB_HOSTNAME
            Value:
              Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'InternalLB']]

  NginxService:
    Type: AWS::ECS::Service
    DependsOn:
    - NginxLoadBalancerRuleHTTP
    - NginxLoadBalancerRuleHTTPS
    Properties:
      ServiceName: 'web-nginx'
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']]
      TaskDefinition: !Ref 'NginxTaskDefinition'
      LoadBalancers:
        - ContainerName: 'web-nginx'
          ContainerPort: !Ref 'HttpPort'
          TargetGroupArn: !Ref 'NginxTargetGroup'

  NginxTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /nginx-status
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Join ['-', [!Ref 'AWS::StackName', 'nginx']]
      Port: !Ref 'HttpPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]

  NginxLoadBalancerRuleHTTP:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'NginxTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListenerHTTP']]
      Priority: !Ref 'Priority'

  NginxLoadBalancerRuleHTTPS:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'NginxTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListenerHTTPS']]
      Priority: !Ref 'Priority'


  #--------------------------------------------------------------------------------------------------------------------
  # NODEJS
  # Backend running behind InternalLB:8080
  #--------------------------------------------------------------------------------------------------------------------

  NodeTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: 'node'
      Cpu: 1024
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: 'node'
          Image: !Join ['', [!Ref 'ImageRepository', 'web-node', !Ref 'ImageTag']]
          PortMappings:
            - ContainerPort: !Ref 'BackendPort'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'AWS::StackName'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'node'
          Ulimits:
          - Name: nofile
            HardLimit: 8192
            SoftLimit: 8192
          Environment:
          - { Name: API_URL, Value: !Ref 'ApiURL' }
          - Name: PUBLIC
            Value:
              Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'DomainName']]

  NodeService:
    Type: AWS::ECS::Service
    DependsOn: NodeLoadBalancerRule
    Properties:
      ServiceName: 'node'
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      HealthCheckGracePeriodSeconds: 120
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']]
      TaskDefinition: !Ref 'NodeTaskDefinition'
      LoadBalancers:
        - ContainerName: 'node'
          ContainerPort: !Ref 'BackendPort'
          TargetGroupArn: !Ref 'NodeTargetGroup'

  NodeTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: 'node'
      Port: !Ref 'BackendPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]

  NodeLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'NodeTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PrivateListener']]
      Priority: !Ref 'Priority'


